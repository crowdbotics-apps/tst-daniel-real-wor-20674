// Guidelines for our developers
// 1. Screens are limited to their own folder in src/features
// 2. Reducers are written in a reducers.js file in that folder
// 3. Sagas are written in a sagas.js file in that folder
// 4. Each screen implements their own actions/services/constants too
// 5. Only guideline 1. is mandatory, everything is else is opt-in.

// All the code below would be generated by our codegen service.
// On every statement a brief comment describes the codegen strategy.
// Also important noting that we can extend the guidelines to be more
// configurable - by allowing users to set reducers file names, sagas file names,
// or even the folder where screens are found. This data could be either
// be statically saved in this configuration file or persisted in our DB
// alongside the project record. The key takeaway is that we would have to check
// on such configuration values before performing code-generation.

// Codegen the hits on a glob-search with pattern 'src/features/*'
import Posts from '../features/Posts';
// Codegen the hits on a glob-search with pattern 'src/features/**/reducers.js'
import PostsReducers from '../features/Posts/reducers.js';
// Codegen the hits on a glob-search with pattern 'src/features/**/sagas.js'
import PostsSagas from '../features/Posts/sagas.js';
// Hardcoded import
import SplashScreen from '../features/SplashScreen';

// Based on the hits above, codegen the map below
export const features = [
  {
    module: Posts,
    name: 'Posts',
    human_name: 'Posts',
    access_route: 'Posts',
  },
  {
    module: SplashScreen,
    name: 'SplashScreen',
    human_name: 'Splash Screen',
    access_route: 'Splash Screen',
  },
];

// Codegen a map between search hits names and their reducers, if present
export const reducers = {Posts: PostsReducers};
// Codegen a map between search hits names and their sagas, if present
export const sagas = [PostsSagas];
